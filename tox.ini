# Generated by https://github.com/nens/nens-meta version 0.1.dev0.
# Some customisation options are indicated below.
# If you want this file to be left alone, remove this header and add the
# following to ".nens.toml":
#
#   [tox]
#   leave_alone = true
#

[tox]
# If locally you don't have all the various python versions: that's OK, we'll skip them.
skip_missing_interpreters = true
# We need 4.4.0 for constrain_package_deps.
min_version = 4.4.0
# envlist is what gets run by default if you just type "tox".
# The idea is that just running "tox" is equivalent to the checks that happen on github.
envlist =
    lint
    py310
    py312
    coverage
# Adjust envlist in .nens.toml, [tox] > default_environments (which is a list).

[testenv]
description = Run the tests
use_develop = true
skip_install = false
constrain_package_deps = true
extras =
    test
commands =
    pytest --no-header --tb line

[testenv:lint]
description = Run formatters/linters for basic code sanity and neatness
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run --all

# The commands/environments below are for easily calling them from github actions with a
# fixed name. And for a bit of automation.
[testenv:format]
description = Automatically reformat code
skip_install = true
deps =
    ruff
commands =
    ruff format

[testenv:coverage]
description = Get a test coverage report
use_develop = true
skip_install = false
constrain_package_deps = true
allowlist_externals =
    sh
deps =
    coverage
extras =
    test
commands =
    coverage run -m pytest --no-header --tb line
    coverage xml
    coverage html
    sh -c 'coverage report --format markdown > for_step_summary.md'
    coverage report --format text --fail-under 1

# Adjust minimum coverage in .nens.toml, [tox] > minimum_coverage

# Reinout suspects the next ones can come in handy, even though they're not enabled by
# default.
[testenv:release-check]
description = Ensure that the distribution is ready to release
skip_install = true
deps =
    twine
    build
commands =
    python -m build --sdist
    twine check dist/*

[testenv:dependencies]
description = Check if the package defines all its dependencies
skip_install = true
deps =
    build
    z3c.dependencychecker>=2.14.3
commands =
    python -m build --sdist
    dependencychecker

[testenv:dependencies-graph]
# Probably only runs on linux/mac?
description = Generate a graph out of the dependencies of the package
skip_install = false
allowlist_externals =
    sh
deps =
    pipdeptree>=2.5.1
    graphviz  # optional dependency of pipdeptree
commands =
    echo '```mermaid' > dependencies.md
    sh -c 'pipdeptree --packages massless --mermaid >> dependencies.md'
    echo '```' >> dependencies.md
    sh -c 'cp dependencies.md for_step_summary.md'

# Configure extra_lines in `.nens.toml` if you want more content.
# Example:
# [tox]
# extra_lines = """
# [testenv:something]
# description = xyz
# ...
# """
